/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryCreateRequest from '../model/CategoryCreateRequest';
import CategoryPathResponse from '../model/CategoryPathResponse';
import CategoryResponse from '../model/CategoryResponse';
import CategorySearchResponse from '../model/CategorySearchResponse';

/**
* CategoryController service.
* @module api/CategoryControllerApi
* @version v0
*/
export default class CategoryControllerApi {

    /**
    * Constructs a new CategoryControllerApi. 
    * @alias module:api/CategoryControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the callDelete operation.
     * @callback module:api/CategoryControllerApi~callDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} categoryId 
     * @param {module:api/CategoryControllerApi~callDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    callDelete(categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling callDelete");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auction-service/categories/{categoryId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/CategoryControllerApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CategoryCreateRequest} categoryCreateRequest 
     * @param {module:api/CategoryControllerApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryResponse}
     */
    create(categoryCreateRequest, callback) {
      let postBody = categoryCreateRequest;
      // verify the required parameter 'categoryCreateRequest' is set
      if (categoryCreateRequest === undefined || categoryCreateRequest === null) {
        throw new Error("Missing the required parameter 'categoryCreateRequest' when calling create");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/auction-service/categories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the get operation.
     * @callback module:api/CategoryControllerApi~getCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} categoryId 
     * @param {module:api/CategoryControllerApi~getCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryResponse}
     */
    get(categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling get");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/auction-service/categories/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLowLevelCategories operation.
     * @callback module:api/CategoryControllerApi~getLowLevelCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the categories that are allowed to be assigned to auctions (some categories are to general to be assigned to auction)
     * @param {module:api/CategoryControllerApi~getLowLevelCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryResponse>}
     */
    getLowLevelCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CategoryResponse];
      return this.apiClient.callApi(
        '/auction-service/categories/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPath operation.
     * @callback module:api/CategoryControllerApi~getPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryPathResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} categoryId 
     * @param {module:api/CategoryControllerApi~getPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryPathResponse}
     */
    getPath(categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getPath");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CategoryPathResponse;
      return this.apiClient.callApi(
        '/auction-service/categories/{categoryId}/path', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopLevelCategories operation.
     * @callback module:api/CategoryControllerApi~getTopLevelCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategoryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves top level categories which are roots (does not have parents)
     * @param {module:api/CategoryControllerApi~getTopLevelCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategoryResponse>}
     */
    getTopLevelCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CategoryResponse];
      return this.apiClient.callApi(
        '/auction-service/categories/entrypoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/CategoryControllerApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CategorySearchResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} phraseInName 
     * @param {module:api/CategoryControllerApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CategorySearchResponse>}
     */
    search(phraseInName, callback) {
      let postBody = null;
      // verify the required parameter 'phraseInName' is set
      if (phraseInName === undefined || phraseInName === null) {
        throw new Error("Missing the required parameter 'phraseInName' when calling search");
      }

      let pathParams = {
      };
      let queryParams = {
        'phraseInName': phraseInName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CategorySearchResponse];
      return this.apiClient.callApi(
        '/auction-service/categories/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
