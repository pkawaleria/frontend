/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuctionDetailedResponse from '../model/AuctionDetailedResponse';
import AuctionSimplifiedResponse from '../model/AuctionSimplifiedResponse';
import CreateAuctionRequest from '../model/CreateAuctionRequest';
import PagedAuctions from '../model/PagedAuctions';
import UpdateAuctionRequest from '../model/UpdateAuctionRequest';

/**
* AuctionCrudController service.
* @module api/AuctionCrudControllerApi
* @version v0
*/
export default class AuctionCrudControllerApi {

    /**
    * Constructs a new AuctionCrudControllerApi. 
    * @alias module:api/AuctionCrudControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAuction operation.
     * @callback module:api/AuctionCrudControllerApi~addAuctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuctionDetailedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateAuctionRequest} createAuctionRequest 
     * @param {module:api/AuctionCrudControllerApi~addAuctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuctionDetailedResponse}
     */
    addAuction(createAuctionRequest, callback) {
      let postBody = createAuctionRequest;
      // verify the required parameter 'createAuctionRequest' is set
      if (createAuctionRequest === undefined || createAuctionRequest === null) {
        throw new Error("Missing the required parameter 'createAuctionRequest' when calling addAuction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AuctionDetailedResponse;
      return this.apiClient.callApi(
        '/auction-service/auctions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeCategory operation.
     * @callback module:api/AuctionCrudControllerApi~changeCategoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuctionDetailedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {String} categoryId 
     * @param {module:api/AuctionCrudControllerApi~changeCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuctionDetailedResponse}
     */
    changeCategory(auctionId, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling changeCategory");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling changeCategory");
      }

      let pathParams = {
        'auctionId': auctionId,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AuctionDetailedResponse;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}/categories/{categoryId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuction operation.
     * @callback module:api/AuctionCrudControllerApi~deleteAuctionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {module:api/AuctionCrudControllerApi~deleteAuctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAuction(auctionId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling deleteAuction");
      }

      let pathParams = {
        'auctionId': auctionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuction operation.
     * @callback module:api/AuctionCrudControllerApi~getAuctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuctionDetailedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {module:api/AuctionCrudControllerApi~getAuctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuctionDetailedResponse}
     */
    getAuction(auctionId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling getAuction");
      }

      let pathParams = {
        'auctionId': auctionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AuctionDetailedResponse;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuctions operation.
     * @callback module:api/AuctionCrudControllerApi~getAuctionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuctionSimplifiedResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userId 
     * @param {module:api/AuctionCrudControllerApi~getAuctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuctionSimplifiedResponse>}
     */
    getAuctions(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getAuctions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AuctionSimplifiedResponse];
      return this.apiClient.callApi(
        '/auction-service/users/{userId}/auctions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAuctions operation.
     * @callback module:api/AuctionCrudControllerApi~searchAuctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedAuctions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [pageSize = 10)] 
     * @param {String} [searchPhrase] 
     * @param {String} [category] 
     * @param {String} [cityId] 
     * @param {Number} [radius] 
     * @param {module:api/AuctionCrudControllerApi~searchAuctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedAuctions}
     */
    searchAuctions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'searchPhrase': opts['searchPhrase'],
        'category': opts['category'],
        'cityId': opts['cityId'],
        'radius': opts['radius']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PagedAuctions;
      return this.apiClient.callApi(
        '/auction-service/auctions/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAuction operation.
     * @callback module:api/AuctionCrudControllerApi~updateAuctionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuctionDetailedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {module:model/UpdateAuctionRequest} updateAuctionRequest 
     * @param {module:api/AuctionCrudControllerApi~updateAuctionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuctionDetailedResponse}
     */
    updateAuction(auctionId, updateAuctionRequest, callback) {
      let postBody = updateAuctionRequest;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling updateAuction");
      }
      // verify the required parameter 'updateAuctionRequest' is set
      if (updateAuctionRequest === undefined || updateAuctionRequest === null) {
        throw new Error("Missing the required parameter 'updateAuctionRequest' when calling updateAuction");
      }

      let pathParams = {
        'auctionId': auctionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AuctionDetailedResponse;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
