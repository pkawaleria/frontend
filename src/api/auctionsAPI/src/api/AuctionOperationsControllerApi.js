/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* AuctionOperationsController service.
* @module api/AuctionOperationsControllerApi
* @version v0
*/
export default class AuctionOperationsControllerApi {

    /**
    * Constructs a new AuctionOperationsControllerApi. 
    * @alias module:api/AuctionOperationsControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accept operation.
     * @callback module:api/AuctionOperationsControllerApi~acceptCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {module:api/AuctionOperationsControllerApi~acceptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    accept(auctionId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling accept");
      }

      let pathParams = {
        'auctionId': auctionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}/operations/accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archive operation.
     * @callback module:api/AuctionOperationsControllerApi~archiveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {module:api/AuctionOperationsControllerApi~archiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    archive(auctionId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling archive");
      }

      let pathParams = {
        'auctionId': auctionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}/operations/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reject operation.
     * @callback module:api/AuctionOperationsControllerApi~rejectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {module:api/AuctionOperationsControllerApi~rejectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    reject(auctionId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling reject");
      }

      let pathParams = {
        'auctionId': auctionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}/operations/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
