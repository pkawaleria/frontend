/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PagedAuctions from '../model/PagedAuctions';

/**
* LoggedInAuctioneerController service.
* @module api/LoggedInAuctioneerControllerApi
* @version v0
*/
export default class LoggedInAuctioneerControllerApi {

    /**
    * Constructs a new LoggedInAuctioneerControllerApi. 
    * @alias module:api/LoggedInAuctioneerControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getActiveAuctions operation.
     * @callback module:api/LoggedInAuctioneerControllerApi~getActiveAuctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedAuctions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [pageSize = 10)] 
     * @param {module:api/LoggedInAuctioneerControllerApi~getActiveAuctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedAuctions}
     */
    getActiveAuctions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PagedAuctions;
      return this.apiClient.callApi(
        '/auction-service/active-auctioneer/active-auctions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchivedAuctions operation.
     * @callback module:api/LoggedInAuctioneerControllerApi~getArchivedAuctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedAuctions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [pageSize = 10)] 
     * @param {module:api/LoggedInAuctioneerControllerApi~getArchivedAuctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedAuctions}
     */
    getArchivedAuctions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PagedAuctions;
      return this.apiClient.callApi(
        '/auction-service/active-auctioneer/archived-auctions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAwaitingAuctions operation.
     * @callback module:api/LoggedInAuctioneerControllerApi~getAwaitingAuctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedAuctions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [pageSize = 10)] 
     * @param {module:api/LoggedInAuctioneerControllerApi~getAwaitingAuctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedAuctions}
     */
    getAwaitingAuctions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PagedAuctions;
      return this.apiClient.callApi(
        '/auction-service/active-auctioneer/awaiting-auctions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpiredAuctions operation.
     * @callback module:api/LoggedInAuctioneerControllerApi~getExpiredAuctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedAuctions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [pageSize = 10)] 
     * @param {module:api/LoggedInAuctioneerControllerApi~getExpiredAuctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedAuctions}
     */
    getExpiredAuctions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PagedAuctions;
      return this.apiClient.callApi(
        '/auction-service/active-auctioneer/expired-auctions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRejectedAuctions operation.
     * @callback module:api/LoggedInAuctioneerControllerApi~getRejectedAuctionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedAuctions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [pageSize = 10)] 
     * @param {module:api/LoggedInAuctioneerControllerApi~getRejectedAuctionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedAuctions}
     */
    getRejectedAuctions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PagedAuctions;
      return this.apiClient.callApi(
        '/auction-service/active-auctioneer/rejected-auctions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
