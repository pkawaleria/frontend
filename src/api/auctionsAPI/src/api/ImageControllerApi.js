/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuctionImagesResponse from '../model/AuctionImagesResponse';
import ImageDetailedResponse from '../model/ImageDetailedResponse';

/**
* ImageController service.
* @module api/ImageControllerApi
* @version v0
*/
export default class ImageControllerApi {

    /**
    * Constructs a new ImageControllerApi. 
    * @alias module:api/ImageControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addImages operation.
     * @callback module:api/ImageControllerApi~addImagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageDetailedResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {Array.<File>} files 
     * @param {module:api/ImageControllerApi~addImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageDetailedResponse>}
     */
    addImages(auctionId, files, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling addImages");
      }
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling addImages");
      }

      let pathParams = {
        'auctionId': auctionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(files, 'passthrough')
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = [ImageDetailedResponse];
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImage operation.
     * @callback module:api/ImageControllerApi~deleteImageCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {String} imageId 
     * @param {module:api/ImageControllerApi~deleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteImage(auctionId, imageId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling deleteImage");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteImage");
      }

      let pathParams = {
        'auctionId': auctionId,
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}/images/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImage operation.
     * @callback module:api/ImageControllerApi~getImageCallback
     * @param {String} error Error message, if any.
     * @param {Blob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {String} imageId 
     * @param {module:api/ImageControllerApi~getImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Blob}
     */
    getImage(auctionId, imageId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling getImage");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImage");
      }

      let pathParams = {
        'auctionId': auctionId,
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}/images/{imageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImages operation.
     * @callback module:api/ImageControllerApi~getImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuctionImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} auctionId 
     * @param {module:api/ImageControllerApi~getImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuctionImagesResponse}
     */
    getImages(auctionId, callback) {
      let postBody = null;
      // verify the required parameter 'auctionId' is set
      if (auctionId === undefined || auctionId === null) {
        throw new Error("Missing the required parameter 'auctionId' when calling getImages");
      }

      let pathParams = {
        'auctionId': auctionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuthentication'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AuctionImagesResponse;
      return this.apiClient.callApi(
        '/auction-service/auctions/{auctionId}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
