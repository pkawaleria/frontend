/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CategoryNameResponse from './CategoryNameResponse';
import SimpleCategoryResponse from './SimpleCategoryResponse';

/**
 * The CategoryPathResponse model module.
 * @module model/CategoryPathResponse
 * @version v0
 */
class CategoryPathResponse {
    /**
     * Constructs a new <code>CategoryPathResponse</code>.
     * @alias module:model/CategoryPathResponse
     * @param requestedCategory {module:model/SimpleCategoryResponse} 
     * @param path {Array.<module:model/CategoryNameResponse>} 
     */
    constructor(requestedCategory, path) { 
        
        CategoryPathResponse.initialize(this, requestedCategory, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, requestedCategory, path) { 
        obj['requestedCategory'] = requestedCategory;
        obj['path'] = path;
    }

    /**
     * Constructs a <code>CategoryPathResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CategoryPathResponse} obj Optional instance to populate.
     * @return {module:model/CategoryPathResponse} The populated <code>CategoryPathResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CategoryPathResponse();

            if (data.hasOwnProperty('requestedCategory')) {
                obj['requestedCategory'] = SimpleCategoryResponse.constructFromObject(data['requestedCategory']);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], [CategoryNameResponse]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CategoryPathResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CategoryPathResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CategoryPathResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `requestedCategory`
        if (data['requestedCategory']) { // data not null
          SimpleCategoryResponse.validateJSON(data['requestedCategory']);
        }
        if (data['path']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['path'])) {
                throw new Error("Expected the field `path` to be an array in the JSON data but got " + data['path']);
            }
            // validate the optional field `path` (array)
            for (const item of data['path']) {
                CategoryNameResponse.validateJSON(item);
            };
        }

        return true;
    }


}

CategoryPathResponse.RequiredProperties = ["requestedCategory", "path"];

/**
 * @member {module:model/SimpleCategoryResponse} requestedCategory
 */
CategoryPathResponse.prototype['requestedCategory'] = undefined;

/**
 * @member {Array.<module:model/CategoryNameResponse>} path
 */
CategoryPathResponse.prototype['path'] = undefined;






export default CategoryPathResponse;

