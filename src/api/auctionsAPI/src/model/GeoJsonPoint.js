/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeoJsonPoint model module.
 * @module model/GeoJsonPoint
 * @version v0
 */
class GeoJsonPoint {
    /**
     * Constructs a new <code>GeoJsonPoint</code>.
     * @alias module:model/GeoJsonPoint
     */
    constructor() { 
        
        GeoJsonPoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeoJsonPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoJsonPoint} obj Optional instance to populate.
     * @return {module:model/GeoJsonPoint} The populated <code>GeoJsonPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoJsonPoint();

            if (data.hasOwnProperty('x')) {
                obj['x'] = ApiClient.convertToType(data['x'], 'Number');
            }
            if (data.hasOwnProperty('y')) {
                obj['y'] = ApiClient.convertToType(data['y'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('coordinates')) {
                obj['coordinates'] = ApiClient.convertToType(data['coordinates'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoJsonPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoJsonPoint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['coordinates'])) {
            throw new Error("Expected the field `coordinates` to be an array in the JSON data but got " + data['coordinates']);
        }

        return true;
    }


}



/**
 * @member {Number} x
 */
GeoJsonPoint.prototype['x'] = undefined;

/**
 * @member {Number} y
 */
GeoJsonPoint.prototype['y'] = undefined;

/**
 * @member {String} type
 */
GeoJsonPoint.prototype['type'] = undefined;

/**
 * @member {Array.<Number>} coordinates
 */
GeoJsonPoint.prototype['coordinates'] = undefined;






export default GeoJsonPoint;

