/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeoJsonPoint from './GeoJsonPoint';

/**
 * The UpdateAuctionRequest model module.
 * @module model/UpdateAuctionRequest
 * @version v0
 */
class UpdateAuctionRequest {
    /**
     * Constructs a new <code>UpdateAuctionRequest</code>.
     * @alias module:model/UpdateAuctionRequest
     * @param name {String} 
     * @param description {String} 
     * @param price {Number} 
     * @param productCondition {module:model/UpdateAuctionRequest.ProductConditionEnum} 
     * @param cityId {String} 
     * @param cityName {String} 
     * @param location {module:model/GeoJsonPoint} 
     */
    constructor(name, description, price, productCondition, cityId, cityName, location) { 
        
        UpdateAuctionRequest.initialize(this, name, description, price, productCondition, cityId, cityName, location);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, description, price, productCondition, cityId, cityName, location) { 
        obj['name'] = name;
        obj['description'] = description;
        obj['price'] = price;
        obj['productCondition'] = productCondition;
        obj['cityId'] = cityId;
        obj['cityName'] = cityName;
        obj['location'] = location;
    }

    /**
     * Constructs a <code>UpdateAuctionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateAuctionRequest} obj Optional instance to populate.
     * @return {module:model/UpdateAuctionRequest} The populated <code>UpdateAuctionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateAuctionRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('productCondition')) {
                obj['productCondition'] = ApiClient.convertToType(data['productCondition'], 'String');
            }
            if (data.hasOwnProperty('cityId')) {
                obj['cityId'] = ApiClient.convertToType(data['cityId'], 'String');
            }
            if (data.hasOwnProperty('cityName')) {
                obj['cityName'] = ApiClient.convertToType(data['cityName'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = GeoJsonPoint.constructFromObject(data['location']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateAuctionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateAuctionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateAuctionRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['productCondition'] && !(typeof data['productCondition'] === 'string' || data['productCondition'] instanceof String)) {
            throw new Error("Expected the field `productCondition` to be a primitive type in the JSON string but got " + data['productCondition']);
        }
        // ensure the json data is a string
        if (data['cityId'] && !(typeof data['cityId'] === 'string' || data['cityId'] instanceof String)) {
            throw new Error("Expected the field `cityId` to be a primitive type in the JSON string but got " + data['cityId']);
        }
        // ensure the json data is a string
        if (data['cityName'] && !(typeof data['cityName'] === 'string' || data['cityName'] instanceof String)) {
            throw new Error("Expected the field `cityName` to be a primitive type in the JSON string but got " + data['cityName']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          GeoJsonPoint.validateJSON(data['location']);
        }

        return true;
    }


}

UpdateAuctionRequest.RequiredProperties = ["name", "description", "price", "productCondition", "cityId", "cityName", "location"];

/**
 * @member {String} name
 */
UpdateAuctionRequest.prototype['name'] = undefined;

/**
 * @member {String} description
 */
UpdateAuctionRequest.prototype['description'] = undefined;

/**
 * @member {Number} price
 */
UpdateAuctionRequest.prototype['price'] = undefined;

/**
 * @member {module:model/UpdateAuctionRequest.ProductConditionEnum} productCondition
 */
UpdateAuctionRequest.prototype['productCondition'] = undefined;

/**
 * @member {String} cityId
 */
UpdateAuctionRequest.prototype['cityId'] = undefined;

/**
 * @member {String} cityName
 */
UpdateAuctionRequest.prototype['cityName'] = undefined;

/**
 * @member {module:model/GeoJsonPoint} location
 */
UpdateAuctionRequest.prototype['location'] = undefined;





/**
 * Allowed values for the <code>productCondition</code> property.
 * @enum {String}
 * @readonly
 */
UpdateAuctionRequest['ProductConditionEnum'] = {

    /**
     * value: "NEW"
     * @const
     */
    "NEW": "NEW",

    /**
     * value: "NOT_APPLICABLE"
     * @const
     */
    "NOT_APPLICABLE": "NOT_APPLICABLE",

    /**
     * value: "USED"
     * @const
     */
    "USED": "USED"
};



export default UpdateAuctionRequest;

