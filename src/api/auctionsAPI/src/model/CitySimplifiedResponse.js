/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CitySimplifiedResponse model module.
 * @module model/CitySimplifiedResponse
 * @version v0
 */
class CitySimplifiedResponse {
    /**
     * Constructs a new <code>CitySimplifiedResponse</code>.
     * @alias module:model/CitySimplifiedResponse
     * @param id {String} 
     * @param name {String} 
     * @param province {String} 
     * @param district {String} 
     * @param commune {String} 
     */
    constructor(id, name, province, district, commune) { 
        
        CitySimplifiedResponse.initialize(this, id, name, province, district, commune);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, province, district, commune) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['province'] = province;
        obj['district'] = district;
        obj['commune'] = commune;
    }

    /**
     * Constructs a <code>CitySimplifiedResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CitySimplifiedResponse} obj Optional instance to populate.
     * @return {module:model/CitySimplifiedResponse} The populated <code>CitySimplifiedResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CitySimplifiedResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('province')) {
                obj['province'] = ApiClient.convertToType(data['province'], 'String');
            }
            if (data.hasOwnProperty('district')) {
                obj['district'] = ApiClient.convertToType(data['district'], 'String');
            }
            if (data.hasOwnProperty('commune')) {
                obj['commune'] = ApiClient.convertToType(data['commune'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CitySimplifiedResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CitySimplifiedResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CitySimplifiedResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['province'] && !(typeof data['province'] === 'string' || data['province'] instanceof String)) {
            throw new Error("Expected the field `province` to be a primitive type in the JSON string but got " + data['province']);
        }
        // ensure the json data is a string
        if (data['district'] && !(typeof data['district'] === 'string' || data['district'] instanceof String)) {
            throw new Error("Expected the field `district` to be a primitive type in the JSON string but got " + data['district']);
        }
        // ensure the json data is a string
        if (data['commune'] && !(typeof data['commune'] === 'string' || data['commune'] instanceof String)) {
            throw new Error("Expected the field `commune` to be a primitive type in the JSON string but got " + data['commune']);
        }

        return true;
    }


}

CitySimplifiedResponse.RequiredProperties = ["id", "name", "province", "district", "commune"];

/**
 * @member {String} id
 */
CitySimplifiedResponse.prototype['id'] = undefined;

/**
 * @member {String} name
 */
CitySimplifiedResponse.prototype['name'] = undefined;

/**
 * @member {String} province
 */
CitySimplifiedResponse.prototype['province'] = undefined;

/**
 * @member {String} district
 */
CitySimplifiedResponse.prototype['district'] = undefined;

/**
 * @member {String} commune
 */
CitySimplifiedResponse.prototype['commune'] = undefined;






export default CitySimplifiedResponse;

